package com._520it.crm.web.controller;

import com._520it.crm.domain.Employee;
import com._520it.crm.page.PageResult;
import com._520it.crm.query.EmployeeQueryObject;
import com._520it.crm.service.IEmployeeService;
import com._520it.crm.util.UserContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

@Controller
public class EmployeeControllerBefore {

    @Autowired
    private IEmployeeService employeeService;

    @RequestMapping("/employee")
    public String index() {
        return "employee";
    }

    @RequestMapping("login")
    @ResponseBody
    public Map<String, Object> login(String username, String password, HttpSession session) {
        Map<String, Object> result = new HashMap<>();
        Employee currentUser = employeeService.getEmployeeForLogin(username, password);
        if (currentUser != null) {
            result.put("success", true);
            // 把用户信息存入session
            session.setAttribute(UserContext.USER_IN_SESSION, currentUser);
        } else {
            result.put("success", false);
            result.put("message", "账号或密码错误");
        }

        return result;
    }

    @RequestMapping("/employee_list")
    @ResponseBody
    public PageResult list(EmployeeQueryObject queryObject) {
        PageResult pageResult = null;
        pageResult = employeeService.queryForPage(queryObject);

        return pageResult;
    }

    @RequestMapping("/employee_save")
    @ResponseBody
    public Map<String, Object> save(Employee employee) {

        HashMap<String, Object> result = new HashMap<>();
        // 这里选择了抛异常来手机错误信息。有些人可能会判断insert()的返回值是否为空来判断，个人觉得不是很好
        try {
            // 前端只输入了部分字段，剩余字段后端默认设置（密码，是否管理员，状态）
            employee.setPassword("123");
            employee.setAdmin(false);
            employee.setState(true);
            employeeService.insert(employee);
            result.put("success", true);
            result.put("msg", "保存成功");
        } catch (Exception e) {
            result.put("success", false);
            result.put("msg", "保存异常，请联系管理员");
        }
        return result;
    }

    @RequestMapping("/employee_update")
    @ResponseBody
    public Map<String, Object> update(Employee employee) {

        HashMap<String, Object> result = new HashMap<>();
        try {
            /*
            * 老师直接把updateByPrimaryKey的sql多余字段删了
            * 其实可以使用动态sql中的if语句，当值不为null时才执行
            * 这样下次你要改密码，只要把密码传进去即可
            * */
            employeeService.updateByPrimaryKey(employee);
            result.put("success", true);
            result.put("msg", "更新成功");
        } catch (Exception e) {
            result.put("success", false);
            result.put("msg", "更新异常，请联系管理员");
        }
        return result;
    }

    @RequestMapping("/employee_delete")
    @ResponseBody
    public Map<String, Object> delete(Long id) {

        HashMap<String, Object> result = new HashMap<>();
        try {
            /*
            * 还是和上面的update同一个问题，如果用动态sql
            * 这里只需要设置员工的state，后台就可以更新了，不用另外写方法
            * */
            employeeService.updateState(id);
            result.put("success", true);
            result.put("msg", "删除成功");
        } catch (Exception e) {
            result.put("success", false);
            result.put("msg", "删除异常，请联系管理员");
        }
        return result;
    }

}
