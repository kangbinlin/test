<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com._520it.crm.mapper.EmployeeMapper">


    <resultMap id="BaseResultMap" type="com._520it.crm.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="realname" property="realname" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="tel" property="tel" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <!--    <result column="dept_id" property="deptId" jdbcType="BIGINT" />-->
        <result column="inputtime" property="inputtime" jdbcType="DATE"/>
        <result column="state" property="state" jdbcType="BIT"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <association property="dept" javaType="com._520it.crm.domain.Department" columnPrefix="d_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </association>
    </resultMap>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <insert id="insert" parameterType="com._520it.crm.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (username, realname, password, 
      tel, email, dept_id, 
      inputtime, state, admin)
    values (#{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{dept.id,jdbcType=BIGINT},
      #{inputtime,jdbcType=DATE}, #{state,jdbcType=BIT}, #{admin,jdbcType=BIT})
  </insert>

    <update id="updateByPrimaryKey" parameterType="com._520it.crm.domain.Employee">
    update employee
    set username = #{username,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      dept_id = #{dept.id,jdbcType=BIGINT},
      inputtime = #{inputtime,jdbcType=DATE}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
    select id, username, realname, password, tel, email, dept_id, inputtime, state, admin
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>

    <select id="selectAll" resultMap="BaseResultMap">
    select id, username, realname, password, tel, email, dept_id, inputtime, state, admin
    from employee
  </select>

    <select id="getEmployeeForLogin" resultMap="BaseResultMap">
    select * from employee where username=#{username} and password=#{password}
  </select>

    <!--高级查询条件-->
    <sql id="where_sql">
        <where>
            <if test="keyword != null">
                (
                e.username like concat('%', #{keyword}, '%')
                or e.tel like concat('%', #{keyword}, '%')
                or e.email like concat('%', #{keyword}, '%')
                or e.realname like concat('%', #{keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <!--查询总记录数-->
    <select id="queryForPageCount" resultType="java.lang.Long">
        select count(*) from employee e
        <include refid="where_sql"/>
    </select>

    <!--查询分页数据-->
    <select id="queryForPage" resultMap="BaseResultMap">
        select e.id, e.username, e.realname, e.password, e.tel, e.email, e.inputtime, e.state, e.admin,
        d.id as d_id, d.name as d_name
        from employee e left join department d on (d.id = e.dept_id)
        <include refid="where_sql"/>
        ORDER BY e.id
        <if test="page!=null">
            limit #{start}, #{rows}
        </if>
    </select>

    <!--假删除，其实是更新state-->
    <update id="updateState">
        update employee set state = 0
        where id = #{id,jdbcType=BIGINT}
    </update>

    <!--插入emp_role中间表-->
    <insert id="insertRelation">
    insert into emp_role (e_id, r_id) values (#{eid}, #{rid})
  </insert>

    <!--根据eid查询员工对应的角色-->
    <select id="queryRoleByEid" resultType="long">
        select r_id from emp_role where e_id = #{eid}
    </select>


    <delete id="deleteRelation">
        delete from emp_role
        where e_id = #{eid,jdbcType=BIGINT}
    </delete>

</mapper>
